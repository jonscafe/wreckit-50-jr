import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import random

# gampang ni lah aseli ga boong
maze = [
    "##################################################",
    "#...#.........#...#.....#...#.....#.....#.........",
    "###.#.#####.###.#.#.#.###.#.#.#.#.#####.#.#######.",
    "#...#...#...#...#.#.#.#...#...#.#.......#.#...#...",
    "#.#######.###.###.#.#.#.#######.#######.#.#.#.#.#.",
    "#.......#.......#...#...#.....#...#...#.#.#.#.#.#.",
    "#######.#############.#######.###.#.#.###.#.#.#.##",
    "#...#...#.....#.....#.........#...#.#.......#.#...",
    "#.###.###.###.#.###.#########.#.###.#############.",
    "#.....#...#...#.#.#.#.....#...#...#.#.....#.....#.",
    "#.#######.#.###.#.#.#.###.#.#####.#.#.#####.###.#.",
    "#...#.....#.....#...#.#...#...#.#...#.#...#...#.#.",
    "###.###.#########.###.#######.#.#####.#.#.###.#.#.",
    "#.#...#...#...#.#.#.#.........#.......#.#...#.#...",
    "#.###.#.#.#.#.#.#.#.#.#########.#####.#.###.#.####",
    "#.#...#.#...#.#...#.#.#.....#...#.....#...#.#.....",
    "#.#.###.#####.###.#.#.#.###.#####.###.###.#.#####.",
    "#...#.#.#...#...#.#...#.#.........#.....#.#.......",
    "#.###.#.#.#.#.#.#.###.#.###.#########.###.#.#####.",
    "#...#.#.#.#.#.#.#...#.#...#.#.......#.#...#.#...#.",
    "###.#.#.#.#.###.###.#.###.#.#.#####.#.#.#####.#.##",
    "#...#.#.#.#.....#...#.....#.#...#...#.#.......#...",
    "#.###.#.#.#######.#######.#####.#.###.###########.",
    "#...#...#...#.....#...#...#.....#...#.#.......#...",
    "###.#.#####.#.#####.#.#####.#######.###.#####.#.##",
    "#.#.#.#.....#...#...#.#...#...#.......#...#...#...",
    "#.#.###.#######.#.###.#.#.###.#.#####.###.#.#####.",
    "#.#.#...#.......#.#...#.#.#...#.#...#.....#.......",
    "#.#.#.###.#######.#.###.#.#.###.#.#.#############.",
    "#.#.#.#...........#.#...#...#...#.#.#...........#.",
    "#.#.#.#############.###.#########.#.#########.###.",
    "#...#.............#...#...#.......#.#.......#.....",
    "#.###############.###.###.#.#######.#.#####.###.##",
    "#.#.....#.....#...#.#...#.........#.#.#...#...#...",
    "#.#.###.#.###.#.###.###.#######.###.#.###.###.####",
    "#...#...#.#.#...#.....#...#.#...#...#.......#.#...",
    "#####.###.#.#########.###.#.#.###.#########.#.#.#.",
    "#...#.....#.......#...#...#.#...#.........#.#...#.",
    "#.#########.#####.#.#.#.###.###.#####.#####.#####.",
    "#.............#.#...#.#.#.#...#.#...#.......#...#.",
    "#####.#######.#.#.#####.#.#.#.#.#.#.#########.#.#.",
    "#...#.#.....#.#.#.#.....#...#.....#...#...#.#.#...",
    "#.#.###.###.#.#.#.#.###########.#####.#.#.#.#.###.",
    "#.#.....#.....#...#.#.........#.#...#...#...#.#...",
    "#.###.#####.#######.#.###.###.###.#.#####.###.#.##",
    "#.#...#...#.#.......#.#...#.#.#...#...#...#...#.#.",
    "#.#.###.#.###.#########.###.#.#.#####.#.###.###.#.",
    "#.#.#...#...#.#.........#.#...#.#.#...#.#...#...#.",
    "#.###.#####.#.#####.#####.#.###.#.#.#####.###.##..",
    "#.........#.........#...........#.........#......."
]

def genKey(path):
    key = bytearray(16)
    for i, (x, y) in enumerate(path):
        key[i % len(key)] ^= (x + y) % 256
    return bytes(key)

def getFlag(key, iv, ct):
    cipher = AES.new(key, AES.MODE_CBC, iv)
    decrypted = unpad(cipher.decrypt(ct), AES.block_size)
    return decrypted.decode('utf-8')

iv = base64.b64decode("mJKl/x5xJ1viL34VEVDI7g==")
ct = base64.b64decode("TbZavV/mHbnC4MYf5R0A46dC7wwE9LG/emivOaehXZhlr5Xd9HqVCIQuHscCV7j4")

def validate_path(maze, path):
    for x, y in path:
        if maze[x][y] != '*':
            return False
    return True

def play_maze_game():
    print("Navigate through the maze and find the correct path to unlock the flag.")
    print("use (row, col) to mark your path.")
    
    user_path = []
    while True:
        for row in maze:
            print(row)
        
        try:
            move = input("Enter your move as 'row,col' (or type 'done' to finish): ")
            if move.lower() == 'done':
                break
            row, col = map(int, move.split(','))
            if maze[row][col] == '*':
                user_path.append((row, col))
            else:
                print("Invalid move. Try again.")
        except (ValueError, IndexError):
            print("Invalid input. Enter coordinates as 'row,col'.")

    userKey = genKey(user_path)

    if validate_path(maze, user_path):
        flag = getFlag(userKey, iv, ct)
        print(f"Correct path! Decrypted flag: {flag}")
    else:
        print("Wrong path! Please try again.")

play_maze_game()
